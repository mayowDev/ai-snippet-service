services:
  # Test Runner Service (runs tests before starting API)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=test
      - MONGODB_URI=${MONGODB_URI}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-test-key}
    volumes:
      - .:/app
      - /app/node_modules
    command: npm test
    profiles:
      - test

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=${MONGODB_URI}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret}
    volumes:
      - .:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service (placeholder for Remix UI)
  ui:
    image: node:22.16-alpine
    ports:
      - "3030:3030"
    environment:
      - NODE_ENV=development
      - API_URL=http://api:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    working_dir: /app
    command: echo "Frontend service placeholder - will be implemented in Step 6"
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - ui

networks:
  default:
    name: ai-snippet-network
